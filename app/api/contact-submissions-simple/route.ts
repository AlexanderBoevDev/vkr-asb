import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";

const prisma = new PrismaClient();
const RECAPTCHA_SECRET = process.env.RECAPTCHA_SECRET_KEY || "";

// –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∏–∑ .env
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || "";
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || "";

export async function GET(request: NextRequest) {
  const session = await getServerSession(authOptions);
  if (!session || session.user.role !== "ADMIN") {
    return NextResponse.json({ error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤" }, { status: 403 });
  }

  try {
    const { searchParams } = new URL(request.url);
    const page = parseInt(searchParams.get("page") || "1", 10);
    const limit = parseInt(searchParams.get("limit") || "10", 10);

    const skip = (page - 1) * limit;
    const take = limit;

    const [submissions, totalCount] = await Promise.all([
      prisma.contactSubmissionSimple.findMany({
        skip,
        take,
        orderBy: { createdAt: "desc" }
      }),
      prisma.contactSubmissionSimple.count()
    ]);

    return NextResponse.json({
      submissions,
      totalCount,
      page,
      limit
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ GET /contactSubmissionsSimple:", error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π" },
      { status: 500 }
    );
  }
}

/**
 * –ú–µ—Ç–æ–¥ POST ‚Äî ¬´–ø–∏—Å–∞—Ç—å –º–æ–≥—É—Ç –≤—Å–µ¬ª
 * –° –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π reCAPTCHA v3
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const recaptchaToken = body.recaptchaToken;

    if (!recaptchaToken) {
      return NextResponse.json(
        { error: "No reCAPTCHA token" },
        { status: 400 }
      );
    }

    // 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º reCAPTCHA
    const verifyRes = await fetch(
      "https://www.google.com/recaptcha/api/siteverify",
      {
        method: "POST",
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        body: new URLSearchParams({
          secret: RECAPTCHA_SECRET,
          response: recaptchaToken
        })
      }
    );
    const verifyData = await verifyRes.json();
    if (!verifyData.success || verifyData.score < 0.5) {
      return NextResponse.json(
        { error: "reCAPTCHA check failed" },
        { status: 400 }
      );
    }

    // 2) –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î
    const newSubmission = await prisma.contactSubmissionSimple.create({
      data: {
        name: body.name,
        email: body.email,
        phone: body.phone,
        city: body.city,
        budget: body.budget,
        service: body.service,
        company: body.company,
        website: body.website,
        message: body.message
      }
    });

    // 3) –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    if (TELEGRAM_BOT_TOKEN && TELEGRAM_CHAT_ID) {
      const dateString = new Date(newSubmission.createdAt).toLocaleString(
        "ru-RU",
        {
          year: "numeric",
          month: "2-digit",
          day: "2-digit",
          hour: "2-digit",
          minute: "2-digit",
          second: "2-digit"
        }
      );

      const messageText = `
<b>üü† –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${newSubmission.id}</b>
üóì <b>–î–∞—Ç–∞:</b> ${dateString}

<b>–ò–º—è:</b> ${newSubmission.name}
<b>Email:</b> ${newSubmission.email}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${newSubmission.phone}
<b>–ì–æ—Ä–æ–¥:</b> ${newSubmission.city ?? "‚Äî"}
<b>–ë—é–¥–∂–µ—Ç:</b> ${newSubmission.budget ?? "‚Äî"}
<b>–£—Å–ª—É–≥–∞:</b> ${newSubmission.service ?? "‚Äî"}
<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> ${newSubmission.company ?? "‚Äî"}
<b>–°–∞–π—Ç:</b> ${newSubmission.website ?? "‚Äî"}
<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${newSubmission.message ?? "‚Äî"}
      `.trim();

      try {
        await fetch(
          `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              chat_id: TELEGRAM_CHAT_ID,
              text: messageText,
              parse_mode: "HTML"
            })
          }
        );
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", err);
      }
    } else {
      console.warn("TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env");
    }

    // 4) –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return NextResponse.json(newSubmission, { status: 201 });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ POST /contactSubmissionsSimple:", error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏" },
      { status: 500 }
    );
  }
}
